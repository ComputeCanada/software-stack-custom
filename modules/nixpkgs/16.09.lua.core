local arch, interconnect, generic_nixpkgs=...

help([[Nixpkgs is a collection of packages for the Nix package manager - Homepage: https://github.com/NixOS/nixpkgs]])
whatis("Description: Nixpkgs is a collection of packages for the Nix package manager - Homepage: https://github.com/NixOS/nixpkgs")

add_property(   "lmod", "sticky")

local root = "/cvmfs/soft.computecanada.ca/nix/var/nix/profiles/16.09"

setenv("NIXUSER_PROFILE", root)
prepend_path("PATH", pathJoin(root, "sbin"))
prepend_path("PATH", pathJoin(root, "bin"))
prepend_path("PATH", "/cvmfs/soft.computecanada.ca/custom/bin")
prepend_path("LIBRARY_PATH", pathJoin(root, "lib"))
prepend_path("C_INCLUDE_PATH", pathJoin(root, "include"))
prepend_path("CPLUS_INCLUDE_PATH", pathJoin(root, "include"))
prepend_path("MANPATH", pathJoin(root, "share/man"))
prepend_path("ACLOCAL_PATH", pathJoin(root, "share/aclocal"))
prepend_path("PKG_CONFIG_PATH", pathJoin(root, "share/pkgconfig"))
prepend_path("PKG_CONFIG_PATH", pathJoin(root, "lib/pkgconfig"))
setenv("FONTCONFIG_FILE", pathJoin(root, "etc/fonts/fonts.conf"))
prepend_path("PYTHONPATH", "/cvmfs/soft.computecanada.ca/custom/python/site-packages")
setenv("PERL5OPT", "-I" .. pathJoin(root, "lib/perl5") .. " -I" .. pathJoin(root, "lib/perl5/site_perl"))
prepend_path("PERL5LIB", pathJoin(root, "lib/perl5/site_perl"))
prepend_path("PERL5LIB", pathJoin(root, "lib/perl5"))
setenv("TZDIR", pathJoin(root,"share/zoneinfo"))
local posix = require "posix"
-- RedHat based systems
if posix.stat("/etc/pki/tls/certs/","type") == "directory" then
	setenv("SSL_CERT_FILE", "/etc/pki/tls/certs/ca-bundle.crt")
	setenv("CURL_CA_BUNDLE", "/etc/pki/tls/certs/ca-bundle.crt")
-- Debian based systems
elseif posix.stat("/etc/ssl/certs/","type") == "directory" then
	setenv("SSL_CERT_FILE", "/etc/ssl/certs/ca-certificates.crt")
	setenv("CURL_CA_BUNDLE", "/etc/ssl/certs/ca-certificates.crt")
end

setenv("PAGER", "less -R")
pushenv("LESSOPEN", "|" .. pathJoin(root, "bin/lesspipe.sh %s"))
setenv("LOCALE_ARCHIVE", pathJoin(root, "lib/locale/locale-archive"))
if os.getenv("XDG_DATA_DIRS") then
	prepend_path("XDG_DATA_DIRS", pathJoin(root, "share"))
else
	setenv("XDG_DATA_DIRS", pathJoin(root, "share") .. ":/usr/local/share:/usr/share")
end
if os.getenv("XDG_CONFIG_DIRS") then
	prepend_path("XDG_CONFIG_DIRS", pathJoin(root, "etc/xdg"))
else
	setenv("XDG_CONFIG_DIRS", pathJoin(root, "etc/xdg") .. ":/etc/xdg")
end

require("os")
-- Define RSNT variables
-- do something only at load time, if not already defined. Otherwise, unloading the module will lose the predefined value if there is one
if mode() == "load" then
	setenv("RSNT_ARCH", arch)
end
if mode() == "load" then
	setenv("RSNT_INTERCONNECT", interconnect)
end

-- let pip use our wheel house
if arch == "avx512" then
        setenv("PIP_CONFIG_FILE", "/cvmfs/soft.computecanada.ca/config/python/pip-avx512.conf")
elseif arch == "avx2" then
        setenv("PIP_CONFIG_FILE", "/cvmfs/soft.computecanada.ca/config/python/pip-avx2.conf")
elseif arch == "avx" then
        setenv("PIP_CONFIG_FILE", "/cvmfs/soft.computecanada.ca/config/python/pip-avx.conf")
else
        setenv("PIP_CONFIG_FILE", "/cvmfs/soft.computecanada.ca/config/python/pip.conf")
end

-- also make easybuild and easybuild-generated modules accessible
prepend_path("PATH", "/cvmfs/soft.computecanada.ca/easybuild/bin")
setenv("EASYBUILD_CONFIGFILES", "/cvmfs/soft.computecanada.ca/easybuild/config.cfg")
setenv("EASYBUILD_BUILDPATH", pathJoin("/dev/shm", os.getenv("USER")))

setenv("EBROOTNIXPKGS", root)
setenv("EBVERSIONNIXPKGS", "16.09")

if generic_nixpkgs then
	prepend_path("MODULEPATH", "/cvmfs/soft.computecanada.ca/easybuild/modules/2017/Core")
else
	prepend_path("MODULEPATH", "/cvmfs/soft.computecanada.ca/easybuild/modules/2017/Core-" .. arch)
end

local user = os.getenv("USER","unknown")
local home = os.getenv("HOME",pathJoin("/home",user))
if user ~= "ebuser" then
    prepend_path("MODULEPATH", pathJoin(home, ".local/easybuild/modules/2017/Core"))
end



