#!/usr/bin/env ruby
# report a user quota on Graham's Oceanstor storage appliance
# assumes certain filesystem and quota tree IDs (i.e. each quota ID
# is 0@0@2@$uidNumber)

require 'net/http'
require 'openssl'
require 'json'
require 'etc'

config = begin
           JSON.parse(IO.read(ENV["OCEANSTOR_QUOTA_CONFIG"] || "/opt/cc/etc/oceanstor-quota.rc"))
         rescue
           puts "#{$0}: failed to read configuration file"
           exit 1
         end

user, password, host, port = config.values_at("username", "password", "host", "port")

http = Net::HTTP.new(host, port)
http.use_ssl = true
http.verify_mode = OpenSSL::SSL::VERIFY_NONE
http.start do |http|
  auth_req = Net::HTTP::Post.new(URI("https://#{host}:#{port}/deviceManager/rest/xxxxx/sessions"))
  auth_req.body = { "username" => user, "password" => password, "scope" => 0 }.to_json
  response = http.request(auth_req)
  cookies = response.get_fields('set-cookie')
  cookie = cookies[0].split(';')[0]
  data = JSON.parse(response.body)
  token = data["data"]["iBaseToken"]
  devid = data["data"]["deviceid"]
  token_body = { "iBaseToken" => token }.to_json
  ARGV.each do |username|
    begin
      passwd = Etc.getpwnam username
      uidnum = passwd.uid
      quota_req = Net::HTTP::Get.new(URI("https://#{host}:#{port}/deviceManager/rest/#{devid}/FS_QUOTA/0@0@2@#{uidnum}"))
      quota_req['Cookie'] = cookie
      quota_req.body = token_body
      response = http.request(quota_req)
      data = JSON.parse(response.body)
      used, max, files_used, files_max =
                             [ "SPACEUSED", "SPACEHARDQUOTA", "FILEUSED", "FILEHARDQUOTA" ].map { |key| data["data"][key].to_i }
      puts "#{used} #{max} #{files_used} #{files_max}"
    rescue ArgumentError
      $stderr.puts "#{$0}: Unknown username #{username}"
    end
  end
  logout_req = Net::HTTP::Delete.new(URI("https://#{host}:#{port}/deviceManager/rest/#{devid}/sessions"))
  logout_req['Cookie'] = cookie
  logout_req.body = token_body
  response = http.request(logout_req)
end
