#!/bin/bash

this_bin=$(basename $0)

echo_fr_or_else() {
  if [[ "$LANG" =~ ^fr_ ]]; then echo "$1"; else echo "$2"; fi
}

print_usage() {
  echo_fr_or_else "Syntaxe:" "Usage:"
  echo_fr_or_else \
    "$this_bin [-h|--help] répertoire_parent [--batch ['<options>']]" \
    "$this_bin [-h|--help] parent_directory [--batch ['<options>']]"

  if [[ "$1" = "help" ]]; then
    echo -e "\nArguments:"
    echo_fr_or_else \
      "  --batch      # Mode non-interactif - affiche le résultat et quitte" \
      "  --batch      # Batch mode - prints the result and quits"
    echo_fr_or_else \
      "  '<options>'  # Voir les options de duc avec : duc ls --help" \
      "  '<options>'  # See the duc options with: duc ls --help"
  fi
}

# Check input arguments
if [[ "$#" -lt 1 ]]; then print_usage; exit 1; fi
if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then print_usage help; exit 0; fi

# Check if the path exists and is a directory
path="$1"

if [ ! -d "$path" ]; then
  echo_fr_or_else \
    "Erreur: '$path' n'existe pas." \
    "Error: '$path' does not exist."
  exit 1
fi

# Get the full path without /lustre0*
path=$(realpath $path | sed -e "s_^/lustre[0-9]\{2\}__g")
fs=$(echo $path | awk -F "/" '{print $2}')

# If the file system is /nearline, abort
if [ "$fs" = "nearline" ]; then
  echo_fr_or_else \
    "Erreur: l'information n'est pas disponible pour l'espace Nearline." \
    "Error: the information is not available for the Nearline space."
  exit 2
fi

# If the path is in the project space
if [[ "$path" =~ ^/project/[[:digit:]]* ]]; then
  gid=$(echo $path | awk -F "/" '{print $3}')
  gname=$(id | cut -d' ' -f3 | cut -d= -f2 | tr , '\n' | \
    grep $gid | cut -d'(' -f2 | cut -d')' -f1)

  duc_db="/project/.duc_databases/${gname}.sqlite"
  query_path=$(echo $path | sed -e "s_^/project/${gid}_/project/${gname}_g")
else
  duc_db="/${fs}/.duc_databases/${USER}.sqlite"
  query_path=$path
fi

if [ "$2" = "--batch" ]; then
  duc ls $3 --database="$duc_db" "$query_path"
else
  duc ui --database="$duc_db" "$query_path"
fi
